-- 0004_create_orders_and_items.sql

-- Create the orders table
create table if not exists orders (
    id text primary key, -- Using TEXT because the app generates custom IDs like 'order-timestamp-random'
    created_at timestamptz with time zone default now() not null,
    tenant_id bigint not null,
    cashier_id uuid null, -- Can be null if cashier is not tracked
    subtotal numeric not null,
    vat numeric not null,
    total numeric not null,

    constraint fk_tenant
        foreign key(tenant_id) 
        references tenants(tenant_id)
        on delete set null, -- Or ON DELETE RESTRICT depending on business logic

    constraint fk_cashier
        foreign key(cashier_id)
        references cashiers(id)
        on delete set null
);

-- Create indexes for faster queries
create index if not exists idx_orders_tenant_id on orders(tenant_id);
create index if not exists idx_orders_cashier_id on orders(cashier_id);
create index if not exists idx_orders_created_at on orders(created_at);

-- Add comments to the orders table
comment on table orders is 'Stores the main details of each completed order.';
comment on column orders.id is 'Unique identifier for the order, generated by the application.';
comment on column orders.created_at is 'Timestamp of when the order was placed.';
comment on column orders.tenant_id is 'Foreign key linking to the tenant for this order.';
comment on column orders.cashier_id is 'Foreign key linking to the cashier who processed the order.';
comment on column orders.subtotal is 'The total price of items before VAT.';
comment on column orders.vat is 'The VAT amount for the order.';
comment on column orders.total is 'The final total amount for the order (subtotal + vat).';


-- Create the order_items table
create table if not exists order_items (
    id bigint generated by default as identity primary key,
    order_id text not null,
    product_id uuid not null,
    quantity int not null check (quantity > 0),
    price numeric not null, -- The price of the product at the time of sale

    constraint fk_order
        foreign key(order_id)
        references orders(id)
        on delete cascade, -- If an order is deleted, its items are also deleted

    constraint fk_product
        foreign key(product_id)
        references products(id)
        on delete set null -- If a product is deleted, we keep the order history but nullify the product link
);

-- Create indexes for faster queries
create index if not exists idx_order_items_order_id on order_items(order_id);
create index if not exists idx_order_items_product_id on order_items(product_id);

-- Add comments to the order_items table
comment on table order_items is 'Stores the individual items within each order.';
comment on column order_items.id is 'Unique identifier for the order item entry.';
comment on column order_items.order_id is 'Foreign key linking to the orders table.';
comment on column order_items.product_id is 'Foreign key linking to the product that was sold.';
comment on column order_items.quantity is 'The quantity of the product sold.';
comment on column order_items.price is 'The per-item price at the time of the transaction, to preserve historical accuracy.';
